# lzscr stdlib prelude (M1)
# 最低限の便利関数。将来段階的に拡充します。

# 恒等・合成
~id = \~x -> ~x;
~compose = \~f -> \~g -> \~x -> ~f (~g ~x);

# Bool ラップ（ランタイムの and/or/not を薄く包む例）
~bool_and = \~a -> \~b -> ~and ~a ~b;
~bool_or  = \~a -> \~b -> ~or ~a ~b;
~bool_not = \~a -> ~not ~a;

# Result helpers
~result_is_ok = \~r -> ((\ .Ok _ -> ~true) | (\ .Err _ -> ~false)) ~r;
~result_is_err = \~r -> ((\ .Ok _ -> ~false) | (\ .Err _ -> ~true)) ~r;
~result_map = \~f -> \~r -> ((\ .Ok ~x -> .Ok (~f ~x)) | (\ .Err ~e -> .Err ~e)) ~r;
~result_map_err = \~f -> \~r -> ((\ .Ok ~x -> .Ok ~x) | (\ .Err ~e -> .Err (~f ~e))) ~r;
~result_bind = \~f -> \~r -> ((\ .Ok ~x -> ~f ~x) | (\ .Err ~e -> .Err ~e)) ~r;
~result_unwrap_or = \~d -> \~r -> ((\ .Ok ~x -> ~x) | (\ .Err _ -> ~d)) ~r;

# Option 風（Ctor は .Some / .None を使用）。AltLambdaで分配。
~option_is_some = \~o -> ((\ .Some _ -> ~true) | (\ .None -> ~false)) ~o;
~option_map = \~f -> \~o -> ((\ .Some ~x -> .Some (~f ~x)) | (\ .None -> .None)) ~o;
~option_is_none = \~o -> ((\ .Some _ -> ~false) | (\ .None -> ~true)) ~o;
~option_bind = \~f -> \~o -> ((\ .Some ~x -> ~f ~x) | (\ .None -> .None)) ~o;
~option_unwrap_or = \~d -> \~o -> ((\ .Some ~x -> ~x) | (\ .None -> ~d)) ~o;

# List 長さ（簡易）: パターンラムダ + AltLambda
~length = \~xs -> ((\[] -> 0) | (\( ~h : ~t ) -> 1 + (~length ~t))) ~xs;

# List 補助（構築子は使わず、分解のみで定義できる範囲に限定）
~head_opt = \~xs -> ((\[] -> .None) | (\( ~h : _ ) -> .Some ~h)) ~xs;
~tail_opt = \~xs -> ((\[] -> .None) | (\( _ : ~t ) -> .Some ~t)) ~xs;
~foldl = \~f -> \~init -> \~xs -> (
	(\[] -> ~init) | (\( ~h : ~t ) -> ~foldl ~f (~f ~init ~h) ~t)
) ~xs;

# 右畳み込み（foldr）
~foldr = \~f -> \~init -> \~xs -> (
        (\[] -> ~init) | (\( ~h : ~t ) -> ~f ~h (~foldr ~f ~init ~t))
) ~xs;

# List 基本操作
~map = \~f -> \~xs -> (
        (\[] -> []) | (\( ~h : ~t ) -> (~cons (~f ~h) (~map ~f ~t)))
) ~xs;

~append = \~xs -> \~ys -> ~foldr (\~x -> \~acc -> (~cons ~x ~acc)) ~ys ~xs;
~reverse = \~xs -> ~foldl (\~acc -> \~x -> (~cons ~x ~acc)) [] ~xs;

# ブール集約（map不要・構築不要な形で定義）
~any = \~p -> \~xs -> ~foldl (\~acc -> \~x -> ~bool_or ~acc (~p ~x)) ~false ~xs;
~all = \~p -> \~xs -> ~foldl (\~acc -> \~x -> ~bool_and ~acc (~p ~x)) ~true ~xs;

# 汎用関数操作
~const = \~x -> \~_ -> ~x;
~flip = \~f -> \~b -> \~a -> ~f ~b ~a;
~compose2 = \~f -> \~g -> \~x -> \~y -> ~f (~g ~x ~y);
~pipe = \~x -> \~f -> ~f ~x;  # x |> f の代替

# String helpers (length and concatenation delegated to Builtins)

# Builtins 経由の委譲（推奨: ユーザは Builtins を直接参照せず prelude を使う）
~Str     = ~Builtins .string;
~Math    = ~Builtins .math;
~Unicode = ~Builtins .unicode;
~Char    = ~Builtins .char;
~Scan    = ~Builtins .scan;

{
        string: ~Str,
        math: ~Math,
        unicode: ~Unicode,
        scan: ~Scan,
        char: ~Char,

        str_len: ~Str .len,
        str_concat: ~Str .concat,
        str_slice: ~Str .slice,
        str_char_at: ~Str .char_at,

        # bool
        bool_and: ~bool_and,
        bool_or: ~bool_or,
        bool_not: ~bool_not,

        # option
        option_is_some: ~option_is_some,
        option_is_none: ~option_is_none,
        option_map: ~option_map,
        option_bind: ~option_bind,
        option_unwrap_or: ~option_unwrap_or,

        # result
        result_is_ok: ~result_is_ok,
        result_is_err: ~result_is_err,
        result_map: ~result_map,
        result_map_err: ~result_map_err,
        result_bind: ~result_bind,
        result_unwrap_or: ~result_unwrap_or,

        # list
        length: ~length,
        head_opt: ~head_opt,
        tail_opt: ~tail_opt,
        foldl: ~foldl,
        foldr: ~foldr,
        map: ~map,
        append: ~append,
        reverse: ~reverse,
        any: ~any,
        all: ~all,

        # function helpers
        id: ~id,
        compose: ~compose,
        compose2: ~compose2,
        flip: ~flip,
        const: ~const,
        pipe: ~pipe,

        # unicode
        cp_of_int: ~Unicode .of_int,
        cp_to_int: ~Unicode .to_int,

        # char classification helpers
        char_is_alpha: ~Char .is_alpha,
        char_is_digit: ~Char .is_digit,
        char_is_alnum: ~Char .is_alnum,
        char_is_space: ~Char .is_space,
        char_between: ~Char .between
}
