{
  "scopeName": "source.lzscr",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#numbers" },
  { "include": "#keywords" },
  { "include": "#operators" },
  { "include": "#member" }
  ],
  "repository": {
    "comments": {
      "patterns": [
    { "name": "comment.line.number-sign.lzscr", "match": "#.*$" },
        {
          "name": "comment.block.lzscr",
          "begin": "\\{-",
          "end": "-\\}",
          "patterns": [ { "include": "#comments" } ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.lzscr",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            { "name": "constant.character.escape.lzscr", "match": "\\\\." }
          ]
        },
        { "name": "string.quoted.single.lzscr", "begin": "'", "end": "'" }
      ]
    },
    "numbers": {
      "patterns": [
        { "name": "constant.numeric.float.lzscr", "match": "\\b[0-9]+\\.[0-9]+\\b" },
        { "name": "constant.numeric.integer.lzscr", "match": "\\b[0-9]+\\b" }
      ]
    },
    "keywords": {
      "patterns": [
        { "name": "keyword.control.lzscr", "match": "\\b(let|in|if|then|else|match|with|fun|rec)\\b" }
      ]
    },
    "operators": {
      "patterns": [
        { "name": "keyword.operator.logical.or.lzscr", "match": "\\|\\|" },
        { "name": "keyword.operator.lambda.arrow.lzscr", "match": "->" },
        { "name": "keyword.operator.caret.catch.lzscr", "match": "\\^\\|" },
        { "name": "keyword.operator.lambda.backslash.lzscr", "match": "\\\\" },
        { "name": "keyword.operator.raise.caret.lzscr", "match": "\\^" },
        { "name": "keyword.operator.pipe.alt.lzscr", "match": "\\|" },
        { "name": "keyword.operator.tilde.ref.lzscr", "match": "~{1,2}" },
        { "name": "keyword.operator.bang.effect.lzscr", "match": "!" },
        { "name": "keyword.operator.assignment.equals.lzscr", "match": "=" },
        { "name": "keyword.operator.math.lzscr", "match": "[+\\-*/]" },
        { "name": "keyword.operator.compare.lzscr", "match": "[<>]=?|==|!=" },
        { "name": "keyword.operator.cons.colon.lzscr", "match": ":" }
      ]
    },
    "member": {
      "patterns": [
        {
          "name": "meta.member.access.lzscr",
          "match": "\\.([A-Za-z_][A-Za-z0-9_]*)",
          "captures": { "1": { "name": "variable.other.member.lzscr" } }
        }
      ]
    }
  }
}
